# Generated by Django 4.2.7 on 2023-11-30 21:22

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.IntegerField(blank=True, default=0, null=True)),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'male'), ('female', 'female')], max_length=100, null=True)),
                ('role', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Technician'), (2, 'Supervisor'), (3, 'Patient'), (4, 'Doctor')], null=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='images')),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.CharField(blank=True, max_length=500, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StSegmentDepression',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StSegmentElevation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StSegmentOptions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StudyQualityOptions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TimeStamp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TWaveMorphologyOptions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Study',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('height', models.DecimalField(blank=True, decimal_places=1, max_digits=100, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=1, max_digits=100, null=True)),
                ('sbp', models.DecimalField(blank=True, decimal_places=1, max_digits=100, null=True)),
                ('dbp', models.DecimalField(blank=True, decimal_places=1, max_digits=100, null=True)),
                ('left_ventricular', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Normal LV Cavity Size'), (2, 'Mild Enlarged LV Cavity Size'), (3, 'Severe Enlarged LV Cavity Size')], null=True)),
                ('wall_thickness', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Mild LVH'), (2, 'Moderate LVH'), (3, 'Severe LVH'), (4, 'Normal')], null=True)),
                ('asymmetric_septal_hypertrophy', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Yes'), (2, 'No'), (3, 'Yes With LVOT Gradient'), (4, 'Yes Without LVOT Gradient')], null=True)),
                ('global_ef', models.DecimalField(blank=True, decimal_places=1, max_digits=100, null=True)),
                ('ef_by_simpson_method', models.DecimalField(blank=True, decimal_places=1, max_digits=100, null=True)),
                ('wall_motion_abnormality', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Yes'), (2, 'No')], null=True)),
                ('diastolic_function', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Normal'), (2, 'Mild Dysfunction'), (3, 'Moderate Dysfunction'), (4, 'Severe Dysfunction')], null=True)),
                ('systolic_function', models.PositiveBigIntegerField(blank=True, choices=[(1, 'No'), (2, 'Yes,Mild(40-49%)'), (3, 'Yes,Moderate(30-39%)'), (4, 'Yes,Severe(less than 30%)')], null=True)),
                ('left_atrium_size', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Normal'), (2, 'Enlarged')], null=True)),
                ('la_pressure', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Normal (<10mmHg)'), (2, 'Increased')], null=True)),
                ('smoky_pattern', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Yes'), (2, 'No')], null=True)),
                ('right_atrium_size', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Normal Size'), (2, 'Enlarged')], null=True)),
                ('ra_pressure', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Normal (<5mmHg)'), (2, 'Increased')], null=True)),
                ('rv_size', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Normal'), (2, 'Enlarged (Mild)'), (3, 'Enlarged (Moderate)'), (4, 'Enlarged (Severe)')], null=True)),
                ('rv_function', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Normal'), (2, 'Decreased (Mild)'), (3, 'Decreased (Moderate)'), (4, 'Decreased (Severe)')], null=True)),
                ('mitral_valve_morphology', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Normal'), (2, 'Rheumatismal'), (3, 'Annular Calcification'), (4, 'Prosthetic Valve')], null=True)),
                ('mitral_stenosis', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'No'), (2, 'Mild'), (3, 'Moderate'), (4, 'Severe')], null=True)),
                ('mitral_regurgitation', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'No'), (2, 'Mild'), (3, 'Moderate'), (4, 'Severe')], null=True)),
                ('aortic_valve_morphology', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Normal'), (2, 'Bicuspid'), (3, 'Rheumatismal'), (4, 'Annular Calcification'), (5, 'Prosthetic Valve')], null=True)),
                ('aortic_stenosis', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'No'), (2, 'Mild'), (3, 'Moderate'), (4, 'Severe')], null=True)),
                ('aortic_regurgitation', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'No'), (2, 'Mild'), (3, 'Moderate'), (4, 'Severe')], null=True)),
                ('tricuspid_valve_morphology', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Normal'), (2, 'Abnormal'), (3, 'Prosthetic Valve')], null=True)),
                ('tricuspid_stenosis', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'No'), (2, 'Mild'), (3, 'Moderate'), (4, 'Severe')], null=True)),
                ('tricuspid_regurgitation', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'No'), (2, 'Mild'), (3, 'Moderate'), (4, 'Severe')], null=True)),
                ('trpg', models.IntegerField(blank=True, null=True)),
                ('pulmonary_valve_morphology', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Normal'), (2, 'Abnormal'), (3, 'Prosthetic Valve')], null=True)),
                ('pulmonary_stenosis', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'No'), (2, 'Mild'), (3, 'Moderate'), (4, 'Severe')], null=True)),
                ('pg', models.IntegerField(blank=True, null=True)),
                ('pulmonary_regurgitation', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'No'), (2, 'Mild'), (3, 'Moderate'), (4, 'Severe')], null=True)),
                ('aorta', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Left Side'), (2, 'Right Side'), (5, 'Dilatation'), (6, 'Dissection')], null=True)),
                ('pulmonary_artery', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'The main pulmonary artery and its proximal branches are confluent with normal size'), (2, 'Abnormal')], null=True)),
                ('ias', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'No evidence of interatrial communication by colour flow Doppler analysis'), (2, 'ASD'), (3, 'IA Aneurysm')], null=True)),
                ('ivs', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'No evidence of interventricular communication by color flow Doppler analysis'), (2, 'VSD')], null=True)),
                ('mass_device', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'There is no visible mass or clot in cardiac chambers or great vessels'), (2, 'Thrombosis'), (3, 'Mass'), (4, 'Device lead')], null=True)),
                ('massdevice_description', models.TextField(blank=True, null=True)),
                ('pericardium', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Normal'), (2, 'Effusion (Mild)'), (3, 'Effusion (Moderate)'), (4, 'Effusion (Severe)'), (5, 'Effusion (Tamponade)'), (6, 'Effusion (CP)')], null=True)),
                ('pericardium_description', models.TextField(blank=True, null=True)),
                ('lv_diastolic_diameter', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('lv_diastolic_diameter_bsa', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('lv_systolic_diameter', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('lv_systolic_diameter_bsa', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('lv_diastolic_volume', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('lv_diastolic_volume_bsa', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('lv_systolic_volume', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('lv_systolic_volume_bsa', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('lv_ef', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('septal_wall_thickness', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('posterior_wall_thickness', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('lv_mass', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('lv_mass_bsa', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('lv_mass_2d_method', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('lv_mass_bsa_2d_method', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('rv_basal_diameter', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('rv_mid_diameter', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('annulus', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('sinuses_of_valsalva', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('sinotublar_junction', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('proximal_ascending_aorta', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('lv_mass_linear_method', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('lv_mass_bsa_linear_method', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('basal_anterior', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('basal_anteroseptal', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('basal_inferoseptal', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('basal_inferior', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('basal_inferolateral', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('basal_anterolateral', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('mid_anterior', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('mid_anteroseptal', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('mid_inferoseptal', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('mid_inferior', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('mid_inferolateral', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('mid_anterolateral', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('apical_anterior', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('apical_septal', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('apical_inferior', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('apical_lateral', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('apex', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('mvg_peak', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('mvg_mean', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('avg_peak', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('avg_mean', models.DecimalField(decimal_places=1, max_digits=100, null=True)),
                ('image_scan', models.ImageField(blank=True, null=True, upload_to='')),
                ('pdf', models.FileField(blank=True, null=True, upload_to='')),
                ('avi', models.FileField(blank=True, null=True, upload_to='')),
                ('recommendation', models.SmallIntegerField(blank=True, choices=[(1, 'Emergent transport to the hospital'), (2, 'Emergency cardiologist consult'), (3, 'Cardiologist consult as soon as possible'), (4, 'Refer to GP')], null=True)),
                ('flagged', models.IntegerField(blank=True, choices=[(0, 'False'), (1, 'True')], null=True)),
                ('study_quality', models.ManyToManyField(blank=True, null=True, related_name='StudyQualityOptions_set', to='core.studyqualityoptions')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalDoctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=150, null=True)),
                ('gender', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Male'), (2, 'Female')], null=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('account', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='َaccount_set+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Echo',
            fields=[
                ('timestamp_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.timestamp')),
                ('reason_for_test', models.CharField(blank=True, max_length=300, null=True)),
                ('rate', models.IntegerField(blank=True, null=True)),
                ('nsr', models.IntegerField(blank=True, choices=[(1, 'Yes'), (2, 'No')], null=True)),
                ('sinus_tachycardia', models.IntegerField(blank=True, choices=[(1, 'Yes'), (2, 'No')], null=True)),
                ('sinus_bradycardia', models.IntegerField(blank=True, choices=[(1, 'Yes'), (2, 'No')], null=True)),
                ('atrial_bradycardia', models.IntegerField(blank=True, choices=[(1, 'Yes'), (2, 'No')], null=True)),
                ('supraventricular_bradycardia', models.IntegerField(blank=True, choices=[(1, 'Yes'), (2, 'No')], null=True)),
                ('narrow_qs_tachycardia', models.IntegerField(blank=True, choices=[(1, 'Yes'), (2, 'No')], null=True)),
                ('wide_qs_tachycardia', models.IntegerField(blank=True, choices=[(1, 'Yes'), (2, 'No')], null=True)),
                ('vt', models.IntegerField(blank=True, choices=[(1, 'Yes'), (2, 'No')], null=True)),
                ('vf', models.IntegerField(blank=True, choices=[(1, 'Yes'), (2, 'No')], null=True)),
                ('avb', models.PositiveSmallIntegerField(blank=True, choices=[(1, '1 AVB'), (2, '2 AVB TYPE I'), (3, '2 AVB TYPE II'), (4, 'CHB')], null=True)),
                ('axis', models.SmallIntegerField(blank=True, choices=[(1, 'Normal'), (2, 'Right Axis Deviation'), (3, 'Left Axis Deviation')], null=True)),
                ('p_wave_appearance', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Normal'), (2, 'Abnormal')], null=True)),
                ('q_wave_appearance', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Absent'), (2, 'Present')], null=True)),
                ('q_wave_morphology', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Pathologic'), (2, 'No Pathologic')], null=True)),
                ('qrs_morphology', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Narrow'), (2, 'Broad')], null=True)),
                ('qrs_height', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Normal'), (2, 'LVH'), (3, 'RVH')], null=True)),
                ('qrs_pattern', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Normal'), (2, 'RBBB'), (3, 'LBBB')], null=True)),
                ('strain_problem', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'No'), (2, 'Left Side'), (3, 'Right Side')], null=True)),
                ('qt', models.IntegerField(blank=True, null=True)),
                ('flagged', models.SmallIntegerField(blank=True, choices=[(0, 'False'), (1, 'True')], null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='')),
                ('video', models.FileField(blank=True, null=True, upload_to='')),
                ('location', models.ManyToManyField(blank=True, null=True, related_name='location_set', to='core.location')),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='account_set+', to=settings.AUTH_USER_MODEL)),
                ('referring_md', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='echo_referring_md', to='core.medicaldoctor')),
                ('st_segment', models.ManyToManyField(blank=True, null=True, related_name='stsegment_options', to='core.stsegmentoptions')),
                ('st_segment_depression', models.ManyToManyField(blank=True, null=True, related_name='st_segment', to='core.stsegmentdepression')),
                ('st_segment_elevation', models.ManyToManyField(blank=True, null=True, related_name='st_segment', to='core.stsegmentelevation')),
                ('t_wave_morphology', models.ManyToManyField(blank=True, null=True, related_name='t_wave_morphology_set', to='core.twavemorphologyoptions')),
            ],
            bases=('core.timestamp', models.Model),
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('timestamp_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.timestamp')),
                ('description', models.TextField(blank=True, max_length=150, null=True)),
                ('status', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Waiting'), (2, 'Handled'), (3, 'Assigned')], default=1, null=True)),
                ('complaint_selected', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Chest Pain'), (2, 'Dyspnea'), (3, 'Palpitation'), (4, 'Cyanosis')], null=True)),
                ('complaint_description', models.CharField(blank=True, max_length=300, null=True)),
                ('client', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='related_client', to=settings.AUTH_USER_MODEL)),
                ('referring_md', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='referring_md', to='core.medicaldoctor')),
                ('related_study', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='related_study_set', to='core.study')),
                ('reporting_md', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reporting_md_set', to='core.medicaldoctor')),
                ('technician', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='related_technician', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('core.timestamp', models.Model),
        ),
    ]
